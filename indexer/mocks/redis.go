// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"time"
)

// RedisMock is a mock implementation of main.Redis.
//
//	func TestSomethingThatUsesRedis(t *testing.T) {
//
//		// make and configure a mocked main.Redis
//		mockedRedis := &RedisMock{
//			AcknowledgeBlocksFunc: func(ctx context.Context, events []string) error {
//				panic("mock out the AcknowledgeBlocks method")
//			},
//			AddBlocksFunc: func(ctx context.Context, blocks []uint64) error {
//				panic("mock out the AddBlocks method")
//			},
//			FetchStreamEventsFunc: func(ctx context.Context, consumerID string, batchSize uint) (map[string]uint64, error) {
//				panic("mock out the FetchStreamEvents method")
//			},
//			FindStaleBlocksFunc: func(ctx context.Context, consumerID string, staleTimeout time.Duration, batchSize uint) (map[string]uint64, error) {
//				panic("mock out the FindStaleBlocks method")
//			},
//			GetLastSeenBlockFunc: func(ctx context.Context) (uint64, error) {
//				panic("mock out the GetLastSeenBlock method")
//			},
//			SaveLastSeenBlockFunc: func(ctx context.Context, block uint64) error {
//				panic("mock out the SaveLastSeenBlock method")
//			},
//		}
//
//		// use mockedRedis in code that requires main.Redis
//		// and then make assertions.
//
//	}
type RedisMock struct {
	// AcknowledgeBlocksFunc mocks the AcknowledgeBlocks method.
	AcknowledgeBlocksFunc func(ctx context.Context, events []string) error

	// AddBlocksFunc mocks the AddBlocks method.
	AddBlocksFunc func(ctx context.Context, blocks []uint64) error

	// FetchStreamEventsFunc mocks the FetchStreamEvents method.
	FetchStreamEventsFunc func(ctx context.Context, consumerID string, batchSize uint) (map[string]uint64, error)

	// FindStaleBlocksFunc mocks the FindStaleBlocks method.
	FindStaleBlocksFunc func(ctx context.Context, consumerID string, staleTimeout time.Duration, batchSize uint) (map[string]uint64, error)

	// GetLastSeenBlockFunc mocks the GetLastSeenBlock method.
	GetLastSeenBlockFunc func(ctx context.Context) (uint64, error)

	// SaveLastSeenBlockFunc mocks the SaveLastSeenBlock method.
	SaveLastSeenBlockFunc func(ctx context.Context, block uint64) error

	// calls tracks calls to the methods.
	calls struct {
		// AcknowledgeBlocks holds details about calls to the AcknowledgeBlocks method.
		AcknowledgeBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []string
		}
		// AddBlocks holds details about calls to the AddBlocks method.
		AddBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Blocks is the blocks argument value.
			Blocks []uint64
		}
		// FetchStreamEvents holds details about calls to the FetchStreamEvents method.
		FetchStreamEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConsumerID is the consumerID argument value.
			ConsumerID string
			// BatchSize is the batchSize argument value.
			BatchSize uint
		}
		// FindStaleBlocks holds details about calls to the FindStaleBlocks method.
		FindStaleBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConsumerID is the consumerID argument value.
			ConsumerID string
			// StaleTimeout is the staleTimeout argument value.
			StaleTimeout time.Duration
			// BatchSize is the batchSize argument value.
			BatchSize uint
		}
		// GetLastSeenBlock holds details about calls to the GetLastSeenBlock method.
		GetLastSeenBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SaveLastSeenBlock holds details about calls to the SaveLastSeenBlock method.
		SaveLastSeenBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Block is the block argument value.
			Block uint64
		}
	}
	lockAcknowledgeBlocks sync.RWMutex
	lockAddBlocks         sync.RWMutex
	lockFetchStreamEvents sync.RWMutex
	lockFindStaleBlocks   sync.RWMutex
	lockGetLastSeenBlock  sync.RWMutex
	lockSaveLastSeenBlock sync.RWMutex
}

// AcknowledgeBlocks calls AcknowledgeBlocksFunc.
func (mock *RedisMock) AcknowledgeBlocks(ctx context.Context, events []string) error {
	if mock.AcknowledgeBlocksFunc == nil {
		panic("RedisMock.AcknowledgeBlocksFunc: method is nil but Redis.AcknowledgeBlocks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Events []string
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockAcknowledgeBlocks.Lock()
	mock.calls.AcknowledgeBlocks = append(mock.calls.AcknowledgeBlocks, callInfo)
	mock.lockAcknowledgeBlocks.Unlock()
	return mock.AcknowledgeBlocksFunc(ctx, events)
}

// AcknowledgeBlocksCalls gets all the calls that were made to AcknowledgeBlocks.
// Check the length with:
//
//	len(mockedRedis.AcknowledgeBlocksCalls())
func (mock *RedisMock) AcknowledgeBlocksCalls() []struct {
	Ctx    context.Context
	Events []string
} {
	var calls []struct {
		Ctx    context.Context
		Events []string
	}
	mock.lockAcknowledgeBlocks.RLock()
	calls = mock.calls.AcknowledgeBlocks
	mock.lockAcknowledgeBlocks.RUnlock()
	return calls
}

// AddBlocks calls AddBlocksFunc.
func (mock *RedisMock) AddBlocks(ctx context.Context, blocks []uint64) error {
	if mock.AddBlocksFunc == nil {
		panic("RedisMock.AddBlocksFunc: method is nil but Redis.AddBlocks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Blocks []uint64
	}{
		Ctx:    ctx,
		Blocks: blocks,
	}
	mock.lockAddBlocks.Lock()
	mock.calls.AddBlocks = append(mock.calls.AddBlocks, callInfo)
	mock.lockAddBlocks.Unlock()
	return mock.AddBlocksFunc(ctx, blocks)
}

// AddBlocksCalls gets all the calls that were made to AddBlocks.
// Check the length with:
//
//	len(mockedRedis.AddBlocksCalls())
func (mock *RedisMock) AddBlocksCalls() []struct {
	Ctx    context.Context
	Blocks []uint64
} {
	var calls []struct {
		Ctx    context.Context
		Blocks []uint64
	}
	mock.lockAddBlocks.RLock()
	calls = mock.calls.AddBlocks
	mock.lockAddBlocks.RUnlock()
	return calls
}

// FetchStreamEvents calls FetchStreamEventsFunc.
func (mock *RedisMock) FetchStreamEvents(ctx context.Context, consumerID string, batchSize uint) (map[string]uint64, error) {
	if mock.FetchStreamEventsFunc == nil {
		panic("RedisMock.FetchStreamEventsFunc: method is nil but Redis.FetchStreamEvents was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ConsumerID string
		BatchSize  uint
	}{
		Ctx:        ctx,
		ConsumerID: consumerID,
		BatchSize:  batchSize,
	}
	mock.lockFetchStreamEvents.Lock()
	mock.calls.FetchStreamEvents = append(mock.calls.FetchStreamEvents, callInfo)
	mock.lockFetchStreamEvents.Unlock()
	return mock.FetchStreamEventsFunc(ctx, consumerID, batchSize)
}

// FetchStreamEventsCalls gets all the calls that were made to FetchStreamEvents.
// Check the length with:
//
//	len(mockedRedis.FetchStreamEventsCalls())
func (mock *RedisMock) FetchStreamEventsCalls() []struct {
	Ctx        context.Context
	ConsumerID string
	BatchSize  uint
} {
	var calls []struct {
		Ctx        context.Context
		ConsumerID string
		BatchSize  uint
	}
	mock.lockFetchStreamEvents.RLock()
	calls = mock.calls.FetchStreamEvents
	mock.lockFetchStreamEvents.RUnlock()
	return calls
}

// FindStaleBlocks calls FindStaleBlocksFunc.
func (mock *RedisMock) FindStaleBlocks(ctx context.Context, consumerID string, staleTimeout time.Duration, batchSize uint) (map[string]uint64, error) {
	if mock.FindStaleBlocksFunc == nil {
		panic("RedisMock.FindStaleBlocksFunc: method is nil but Redis.FindStaleBlocks was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ConsumerID   string
		StaleTimeout time.Duration
		BatchSize    uint
	}{
		Ctx:          ctx,
		ConsumerID:   consumerID,
		StaleTimeout: staleTimeout,
		BatchSize:    batchSize,
	}
	mock.lockFindStaleBlocks.Lock()
	mock.calls.FindStaleBlocks = append(mock.calls.FindStaleBlocks, callInfo)
	mock.lockFindStaleBlocks.Unlock()
	return mock.FindStaleBlocksFunc(ctx, consumerID, staleTimeout, batchSize)
}

// FindStaleBlocksCalls gets all the calls that were made to FindStaleBlocks.
// Check the length with:
//
//	len(mockedRedis.FindStaleBlocksCalls())
func (mock *RedisMock) FindStaleBlocksCalls() []struct {
	Ctx          context.Context
	ConsumerID   string
	StaleTimeout time.Duration
	BatchSize    uint
} {
	var calls []struct {
		Ctx          context.Context
		ConsumerID   string
		StaleTimeout time.Duration
		BatchSize    uint
	}
	mock.lockFindStaleBlocks.RLock()
	calls = mock.calls.FindStaleBlocks
	mock.lockFindStaleBlocks.RUnlock()
	return calls
}

// GetLastSeenBlock calls GetLastSeenBlockFunc.
func (mock *RedisMock) GetLastSeenBlock(ctx context.Context) (uint64, error) {
	if mock.GetLastSeenBlockFunc == nil {
		panic("RedisMock.GetLastSeenBlockFunc: method is nil but Redis.GetLastSeenBlock was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLastSeenBlock.Lock()
	mock.calls.GetLastSeenBlock = append(mock.calls.GetLastSeenBlock, callInfo)
	mock.lockGetLastSeenBlock.Unlock()
	return mock.GetLastSeenBlockFunc(ctx)
}

// GetLastSeenBlockCalls gets all the calls that were made to GetLastSeenBlock.
// Check the length with:
//
//	len(mockedRedis.GetLastSeenBlockCalls())
func (mock *RedisMock) GetLastSeenBlockCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetLastSeenBlock.RLock()
	calls = mock.calls.GetLastSeenBlock
	mock.lockGetLastSeenBlock.RUnlock()
	return calls
}

// SaveLastSeenBlock calls SaveLastSeenBlockFunc.
func (mock *RedisMock) SaveLastSeenBlock(ctx context.Context, block uint64) error {
	if mock.SaveLastSeenBlockFunc == nil {
		panic("RedisMock.SaveLastSeenBlockFunc: method is nil but Redis.SaveLastSeenBlock was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Block uint64
	}{
		Ctx:   ctx,
		Block: block,
	}
	mock.lockSaveLastSeenBlock.Lock()
	mock.calls.SaveLastSeenBlock = append(mock.calls.SaveLastSeenBlock, callInfo)
	mock.lockSaveLastSeenBlock.Unlock()
	return mock.SaveLastSeenBlockFunc(ctx, block)
}

// SaveLastSeenBlockCalls gets all the calls that were made to SaveLastSeenBlock.
// Check the length with:
//
//	len(mockedRedis.SaveLastSeenBlockCalls())
func (mock *RedisMock) SaveLastSeenBlockCalls() []struct {
	Ctx   context.Context
	Block uint64
} {
	var calls []struct {
		Ctx   context.Context
		Block uint64
	}
	mock.lockSaveLastSeenBlock.RLock()
	calls = mock.calls.SaveLastSeenBlock
	mock.lockSaveLastSeenBlock.RUnlock()
	return calls
}
