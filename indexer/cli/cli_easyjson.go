// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cli

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	rpc "github.com/portto/solana-go-sdk/rpc"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli(in *jlexer.Lexer, out *txMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "err":
			if m, ok := out.Err.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Err.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Err = in.Interface()
			}
		case "fee":
			out.Fee = uint64(in.Uint64())
		case "preBalances":
			if in.IsNull() {
				in.Skip()
				out.PreBalances = nil
			} else {
				in.Delim('[')
				if out.PreBalances == nil {
					if !in.IsDelim(']') {
						out.PreBalances = make([]int64, 0, 8)
					} else {
						out.PreBalances = []int64{}
					}
				} else {
					out.PreBalances = (out.PreBalances)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.PreBalances = append(out.PreBalances, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postBalances":
			if in.IsNull() {
				in.Skip()
				out.PostBalances = nil
			} else {
				in.Delim('[')
				if out.PostBalances == nil {
					if !in.IsDelim(']') {
						out.PostBalances = make([]int64, 0, 8)
					} else {
						out.PostBalances = []int64{}
					}
				} else {
					out.PostBalances = (out.PostBalances)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int64
					v2 = int64(in.Int64())
					out.PostBalances = append(out.PostBalances, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preTokenBalances":
			if in.IsNull() {
				in.Skip()
				out.PreTokenBalances = nil
			} else {
				in.Delim('[')
				if out.PreTokenBalances == nil {
					if !in.IsDelim(']') {
						out.PreTokenBalances = make([]rpc.TransactionMetaTokenBalance, 0, 0)
					} else {
						out.PreTokenBalances = []rpc.TransactionMetaTokenBalance{}
					}
				} else {
					out.PreTokenBalances = (out.PreTokenBalances)[:0]
				}
				for !in.IsDelim(']') {
					var v3 rpc.TransactionMetaTokenBalance
					easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc(in, &v3)
					out.PreTokenBalances = append(out.PreTokenBalances, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postTokenBalances":
			if in.IsNull() {
				in.Skip()
				out.PostTokenBalances = nil
			} else {
				in.Delim('[')
				if out.PostTokenBalances == nil {
					if !in.IsDelim(']') {
						out.PostTokenBalances = make([]rpc.TransactionMetaTokenBalance, 0, 0)
					} else {
						out.PostTokenBalances = []rpc.TransactionMetaTokenBalance{}
					}
				} else {
					out.PostTokenBalances = (out.PostTokenBalances)[:0]
				}
				for !in.IsDelim(']') {
					var v4 rpc.TransactionMetaTokenBalance
					easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc(in, &v4)
					out.PostTokenBalances = append(out.PostTokenBalances, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "logMessages":
			if in.IsNull() {
				in.Skip()
				out.LogMessages = nil
			} else {
				in.Delim('[')
				if out.LogMessages == nil {
					if !in.IsDelim(']') {
						out.LogMessages = make([]string, 0, 4)
					} else {
						out.LogMessages = []string{}
					}
				} else {
					out.LogMessages = (out.LogMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.LogMessages = append(out.LogMessages, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "innerInstructions":
			if in.IsNull() {
				in.Skip()
				out.InnerInstructions = nil
			} else {
				in.Delim('[')
				if out.InnerInstructions == nil {
					if !in.IsDelim(']') {
						out.InnerInstructions = make([]metaInnerInstructions, 0, 2)
					} else {
						out.InnerInstructions = []metaInnerInstructions{}
					}
				} else {
					out.InnerInstructions = (out.InnerInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 metaInnerInstructions
					(v6).UnmarshalEasyJSON(in)
					out.InnerInstructions = append(out.InnerInstructions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "loadedAddresses":
			easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc1(in, &out.LoadedAddresses)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli(out *jwriter.Writer, in txMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"err\":"
		out.RawString(prefix[1:])
		if m, ok := in.Err.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Err.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Err))
		}
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Fee))
	}
	{
		const prefix string = ",\"preBalances\":"
		out.RawString(prefix)
		if in.PreBalances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.PreBalances {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"postBalances\":"
		out.RawString(prefix)
		if in.PostBalances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.PostBalances {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"preTokenBalances\":"
		out.RawString(prefix)
		if in.PreTokenBalances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.PreTokenBalances {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc(out, v12)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"postTokenBalances\":"
		out.RawString(prefix)
		if in.PostTokenBalances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.PostTokenBalances {
				if v13 > 0 {
					out.RawByte(',')
				}
				easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc(out, v14)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"logMessages\":"
		out.RawString(prefix)
		if in.LogMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.LogMessages {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"innerInstructions\":"
		out.RawString(prefix)
		if in.InnerInstructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.InnerInstructions {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"loadedAddresses\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc1(out, in.LoadedAddresses)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v txMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v txMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *txMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *txMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli(l, v)
}
func easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc1(in *jlexer.Lexer, out *rpc.TransactionLoadedAddresses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "writable":
			if in.IsNull() {
				in.Skip()
				out.Writable = nil
			} else {
				in.Delim('[')
				if out.Writable == nil {
					if !in.IsDelim(']') {
						out.Writable = make([]string, 0, 4)
					} else {
						out.Writable = []string{}
					}
				} else {
					out.Writable = (out.Writable)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Writable = append(out.Writable, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "readonly":
			if in.IsNull() {
				in.Skip()
				out.Readonly = nil
			} else {
				in.Delim('[')
				if out.Readonly == nil {
					if !in.IsDelim(']') {
						out.Readonly = make([]string, 0, 4)
					} else {
						out.Readonly = []string{}
					}
				} else {
					out.Readonly = (out.Readonly)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Readonly = append(out.Readonly, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc1(out *jwriter.Writer, in rpc.TransactionLoadedAddresses) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"writable\":"
		out.RawString(prefix[1:])
		if in.Writable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Writable {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"readonly\":"
		out.RawString(prefix)
		if in.Readonly == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Readonly {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc(in *jlexer.Lexer, out *rpc.TransactionMetaTokenBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountIndex":
			out.AccountIndex = uint64(in.Uint64())
		case "mint":
			out.Mint = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "uiTokenAmount":
			easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc2(in, &out.UITokenAmount)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc(out *jwriter.Writer, in rpc.TransactionMetaTokenBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountIndex\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AccountIndex))
	}
	{
		const prefix string = ",\"mint\":"
		out.RawString(prefix)
		out.String(string(in.Mint))
	}
	if in.Owner != "" {
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"uiTokenAmount\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc2(out, in.UITokenAmount)
	}
	out.RawByte('}')
}
func easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc2(in *jlexer.Lexer, out *rpc.TokenAccountBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = string(in.String())
		case "decimals":
			out.Decimals = uint8(in.Uint8())
		case "uiAmountString":
			out.UIAmountString = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc2(out *jwriter.Writer, in rpc.TokenAccountBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Decimals))
	}
	{
		const prefix string = ",\"uiAmountString\":"
		out.RawString(prefix)
		out.String(string(in.UIAmountString))
	}
	out.RawByte('}')
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli1(in *jlexer.Lexer, out *metaInnerInstructions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = uint64(in.Uint64())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]struct {
							Accounts     []int  `json:"accounts"`
							Data         string `json:"data"`
							ProgramIDIdx int    `json:"programIdIndex"`
						}, 0, 1)
					} else {
						out.Instructions = []struct {
							Accounts     []int  `json:"accounts"`
							Data         string `json:"data"`
							ProgramIDIdx int    `json:"programIdIndex"`
						}{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 struct {
						Accounts     []int  `json:"accounts"`
						Data         string `json:"data"`
						ProgramIDIdx int    `json:"programIdIndex"`
					}
					easyjsonC5d09f7cDecode(in, &v25)
					out.Instructions = append(out.Instructions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli1(out *jwriter.Writer, in metaInnerInstructions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Index))
	}
	{
		const prefix string = ",\"instructions\":"
		out.RawString(prefix)
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Instructions {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonC5d09f7cEncode(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v metaInnerInstructions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v metaInnerInstructions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *metaInnerInstructions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *metaInnerInstructions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli1(l, v)
}
func easyjsonC5d09f7cDecode(in *jlexer.Lexer, out *struct {
	Accounts     []int  `json:"accounts"`
	Data         string `json:"data"`
	ProgramIDIdx int    `json:"programIdIndex"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]int, 0, 8)
					} else {
						out.Accounts = []int{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int
					v28 = int(in.Int())
					out.Accounts = append(out.Accounts, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "programIdIndex":
			out.ProgramIDIdx = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncode(out *jwriter.Writer, in struct {
	Accounts     []int  `json:"accounts"`
	Data         string `json:"data"`
	ProgramIDIdx int    `json:"programIdIndex"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accounts\":"
		out.RawString(prefix[1:])
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Accounts {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"programIdIndex\":"
		out.RawString(prefix)
		out.Int(int(in.ProgramIDIdx))
	}
	out.RawByte('}')
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli2(in *jlexer.Lexer, out *getEpochInfoRpcResponses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(getEpochInfoRpcResponses, 0, 1)
			} else {
				*out = getEpochInfoRpcResponses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 getEpochInfoRpcResponse
			(v31).UnmarshalEasyJSON(in)
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli2(out *jwriter.Writer, in getEpochInfoRpcResponses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			(v33).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v getEpochInfoRpcResponses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getEpochInfoRpcResponses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getEpochInfoRpcResponses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getEpochInfoRpcResponses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli2(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli3(in *jlexer.Lexer, out *getEpochInfoRpcResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "jsonrpc":
			out.JsonRpc = string(in.String())
		case "id":
			out.ID = uint64(in.Uint64())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(rpc.JsonRpcError)
				}
				easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc3(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli3(out *jwriter.Writer, in getEpochInfoRpcResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.JsonRpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc3(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getEpochInfoRpcResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getEpochInfoRpcResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getEpochInfoRpcResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getEpochInfoRpcResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli3(l, v)
}
func easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc3(in *jlexer.Lexer, out *rpc.JsonRpcError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc3(out *jwriter.Writer, in rpc.JsonRpcError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli4(in *jlexer.Lexer, out *getBlocksRpcResponses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(getBlocksRpcResponses, 0, 1)
			} else {
				*out = getBlocksRpcResponses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v34 getBlocksRpcResponse
			(v34).UnmarshalEasyJSON(in)
			*out = append(*out, v34)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli4(out *jwriter.Writer, in getBlocksRpcResponses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in {
			if v35 > 0 {
				out.RawByte(',')
			}
			(v36).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v getBlocksRpcResponses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getBlocksRpcResponses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getBlocksRpcResponses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getBlocksRpcResponses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli4(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli5(in *jlexer.Lexer, out *getBlocksRpcResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]uint64, 0, 8)
					} else {
						out.Result = []uint64{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v37 uint64
					v37 = uint64(in.Uint64())
					out.Result = append(out.Result, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "jsonrpc":
			out.JsonRpc = string(in.String())
		case "id":
			out.ID = uint64(in.Uint64())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(rpc.JsonRpcError)
				}
				easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc3(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli5(out *jwriter.Writer, in getBlocksRpcResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Result {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.JsonRpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc3(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getBlocksRpcResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getBlocksRpcResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getBlocksRpcResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getBlocksRpcResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli5(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli6(in *jlexer.Lexer, out *getBlockRpcResponses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(getBlockRpcResponses, 0, 0)
			} else {
				*out = getBlockRpcResponses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v40 getBlockRpcResponse
			(v40).UnmarshalEasyJSON(in)
			*out = append(*out, v40)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli6(out *jwriter.Writer, in getBlockRpcResponses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v41, v42 := range in {
			if v41 > 0 {
				out.RawByte(',')
			}
			(v42).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v getBlockRpcResponses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getBlockRpcResponses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getBlockRpcResponses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getBlockRpcResponses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli6(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli7(in *jlexer.Lexer, out *getBlockRpcResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "jsonrpc":
			out.JsonRpc = string(in.String())
		case "id":
			out.ID = uint64(in.Uint64())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(rpc.JsonRpcError)
				}
				easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc3(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli7(out *jwriter.Writer, in getBlockRpcResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.JsonRpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc3(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getBlockRpcResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getBlockRpcResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getBlockRpcResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getBlockRpcResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli7(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli8(in *jlexer.Lexer, out *getBlockResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blockHeight":
			out.BlockHeight = uint64(in.Uint64())
		case "blockTime":
			out.BlockTime = uint64(in.Uint64())
		case "parentSlot":
			out.ParentSlot = uint64(in.Uint64())
		case "blockhash":
			out.Blockhash = string(in.String())
		case "previousBlockhash":
			out.PreviousBlockhash = string(in.String())
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]BlockRawTransaction, 0, 0)
					} else {
						out.Transactions = []BlockRawTransaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v43 BlockRawTransaction
					(v43).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli8(out *jwriter.Writer, in getBlockResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blockHeight\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.BlockHeight))
	}
	{
		const prefix string = ",\"blockTime\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BlockTime))
	}
	{
		const prefix string = ",\"parentSlot\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ParentSlot))
	}
	{
		const prefix string = ",\"blockhash\":"
		out.RawString(prefix)
		out.String(string(in.Blockhash))
	}
	{
		const prefix string = ",\"previousBlockhash\":"
		out.RawString(prefix)
		out.String(string(in.PreviousBlockhash))
	}
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Transactions {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getBlockResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getBlockResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getBlockResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getBlockResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli8(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli9(in *jlexer.Lexer, out *generaResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JsonRpc = string(in.String())
		case "id":
			out.ID = uint64(in.Uint64())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(rpc.JsonRpcError)
				}
				easyjsonC5d09f7cDecodeGithubComPorttoSolanaGoSdkRpc3(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli9(out *jwriter.Writer, in generaResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix[1:])
		out.String(string(in.JsonRpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjsonC5d09f7cEncodeGithubComPorttoSolanaGoSdkRpc3(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v generaResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v generaResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *generaResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *generaResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli9(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli10(in *jlexer.Lexer, out *epochInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "absoluteSlot":
			out.AbsoluteSlot = uint64(in.Uint64())
		case "blockHeight":
			out.BlockHeight = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli10(out *jwriter.Writer, in epochInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"absoluteSlot\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AbsoluteSlot))
	}
	{
		const prefix string = ",\"blockHeight\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BlockHeight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v epochInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v epochInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *epochInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *epochInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli10(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli11(in *jlexer.Lexer, out *commitmentConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commitment":
			out.Commitment = rpc.Commitment(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli11(out *jwriter.Writer, in commitmentConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commitment\":"
		out.RawString(prefix[1:])
		out.String(string(in.Commitment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v commitmentConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v commitmentConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *commitmentConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *commitmentConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli11(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli12(in *jlexer.Lexer, out *call) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli12(out *jwriter.Writer, in call) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v call) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v call) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *call) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *call) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli12(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli13(in *jlexer.Lexer, out *RPC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli13(out *jwriter.Writer, in RPC) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RPC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RPC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli13(l, v)
}
func easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli14(in *jlexer.Lexer, out *BlockRawTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		case "transaction":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v46 := 0
				for !in.IsDelim(']') {
					if v46 < 2 {
						(out.Transaction)[v46] = string(in.String())
						v46++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			if m, ok := out.Version.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Version.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Version = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli14(out *jwriter.Writer, in BlockRawTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"transaction\":"
		out.RawString(prefix)
		out.RawByte('[')
		for v47 := range in.Transaction {
			if v47 > 0 {
				out.RawByte(',')
			}
			out.String(string((in.Transaction)[v47]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		if m, ok := in.Version.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Version.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Version))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockRawTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockRawTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5d09f7cEncodeGithubComSgraphProtocolSgraphIndexerCli14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockRawTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockRawTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5d09f7cDecodeGithubComSgraphProtocolSgraphIndexerCli14(l, v)
}
