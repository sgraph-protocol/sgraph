/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  AddRelationParams,
  addRelationParamsBeet,
} from '../types/AddRelationParams'

/**
 * @category Instructions
 * @category AddRelation
 * @category generated
 */
export type AddRelationInstructionArgs = {
  args: AddRelationParams
}
/**
 * @category Instructions
 * @category AddRelation
 * @category generated
 */
export const addRelationStruct = new beet.FixableBeetArgsStruct<
  AddRelationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', addRelationParamsBeet],
  ],
  'AddRelationInstructionArgs'
)
/**
 * Accounts required by the _addRelation_ instruction
 *
 * @property [_writable_] provider
 * @property [**signer**] authority
 * @property [_writable_] tree
 * @property [] treeController
 * @property [_writable_, **signer**] payer
 * @property [] acProgram
 * @property [] noopProgram
 * @category Instructions
 * @category AddRelation
 * @category generated
 */
export type AddRelationInstructionAccounts = {
  provider: web3.PublicKey
  authority: web3.PublicKey
  tree: web3.PublicKey
  treeController: web3.PublicKey
  payer: web3.PublicKey
  acProgram: web3.PublicKey
  noopProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addRelationInstructionDiscriminator = [
  105, 147, 147, 214, 252, 133, 155, 210,
]

/**
 * Creates a _AddRelation_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddRelation
 * @category generated
 */
export function createAddRelationInstruction(
  accounts: AddRelationInstructionAccounts,
  args: AddRelationInstructionArgs,
  programId = new web3.PublicKey('graph8zS8zjLVJHdiSvP7S9PP7hNJpnHdbnJLR81FMg')
) {
  const [data] = addRelationStruct.serialize({
    instructionDiscriminator: addRelationInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.provider,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.tree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treeController,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.acProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.noopProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
